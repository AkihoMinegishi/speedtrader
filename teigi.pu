@startuml
class GameFlow {
  +int scene #Title~Resultと1~5が対応

  +void change_scene(int sc) #sceneの値を変更
}

class Title {
  -void init_title()
  -void move_options() #optionsへ移動
  -void move_countdown() #countdownへ移動
  +void show_title()
}

class Options {
  -void move_title() #titleへ戻る
  +void show_options()
}

class CountDown {
  -void init_countdown()
  -void move_game()
  +void show_countdown()
}

class InGame {
  -void init_game()
  -void move_result(GameStats gs)
  +void show_game()
}

class Result {
  -void move_title()
  -void move_countdown()
  +void show_result()
}

class SaveData {
  -int[][][] ranks

  -void read_cookie()
  -void write_cookie()
  +void init_data() #初回・リセット時
  +int[][] get_ranks(int type)
  +int[] gets_options()
  +void save_ranks(int type, int rs[][])
  +void save_options(int op[])
}

class ValueMove {
  -int[][] val_sets #価格変動パターン変数
  -int[][] vals #期間中の価格

  +void set_vals(int type) #期の開始時に期間中の価格を決定
  +int get_val(int n) #価格の取得
}

class GameStats {
  -int money
  -int amount
  -int[] vals

  +void change_money(int n)
  +int get_money()
  +void change_amount(int n)
  +int get_amount()
  +int get_curval(int n)
}

class Times {
  -long start_time #カウント開始時のUNIX時間

  +void start_count() #start_timeへUNIX時刻を取得
  +long get_elapsed() #現在のUNIX時間 - start_time
  +int[] get_curtime() #現在の年~分を取得
}

class WindowSize {
  +void fitCanvas()
}

ValueMove ..|> InGame
Times ..|> CountDown
Times ..|> InGame
GameStats ..|> InGame
SaveData ..|> Options
SaveData ..|> Result
@enduml